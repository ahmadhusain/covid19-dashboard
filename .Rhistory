library(shiny); runApp('app_uc.R')
runApp('app_uc.R')
runApp('app_uc.R')
runApp('app_uc.R')
runApp('app_uc.R')
Sys.time()
runApp('app_uc.R')
mapdata <- get_data_from_map(download_map_data())
list_dat <- read_html("https://www.worldometers.info/coronavirus") %>%
html_nodes(css = "td") %>%
html_text()
tot_country <- (length(list_dat)/9)-1
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*9)-8, by = 9))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*9)-7, by = 9))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*9)-6, by = 9))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*9)-5, by = 9))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*9)-4, by = 9))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*9)-3, by = 9))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*9)-2, by = 9))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*9)-1, by = 9))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*9)-0, by = 9))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
dat_map <- dat %>%
mutate(country = case_when(
country == "USA" ~ "United States of America",
country == "UK" ~ "United Kingdom",
country == "UAE" ~ "United Arab Emirates",
country == "S. Korea" ~ "South Korea",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
)) %>%
left_join(mapdata, by = c("country" = "name"))
ts_confirmed <- read.csv(url("https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_19-covid-Confirmed.csv"))
hcmap(map = mapdata, data = dat_map, value = "total_cases",
joinBy = c("iso-a3"), name = "Total Cases",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "black", borderWidth = 0.1,
tooltip = list(valueDecimals = 0)) %>%
hc_add_theme(
hc_theme_db()
) %>%
hc_colorAxis(minColor = "#C5C889", maxColor = "#434348") %>%
hc_exporting(enabled = TRUE) %>%
hc_title(
text = "Mapping number of total cases by country"
) %>%
hc_subtitle(
text = paste("Updated:", Sys.time())
)
hcmap(map = "custom/world.js", data = dat_map, value = "total_cases",
joinBy = c("iso-a3"), name = "Total Cases",
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "black", borderWidth = 0.1,
tooltip = list(valueDecimals = 0)) %>%
hc_add_theme(
hc_theme_db()
) %>%
hc_colorAxis(minColor = "#C5C889", maxColor = "#434348") %>%
hc_exporting(enabled = TRUE) %>%
hc_title(
text = "Mapping number of total cases by country"
) %>%
hc_subtitle(
text = paste("Updated:", Sys.time())
)
write_csv(mapdata, "mapdata.csv")
runApp('app_uc.R')
shiny::runApp()
runApp()
