infoBox(
value = tags$p(style = "font-size: 20px;", comma(sum(dat$total_recovered, na.rm = T), digits = 0)),
title = tags$p(style = "font-size: 30px; text-transform: capitalize;", "Recovered"),
icon = icon("user-plus"),
color = "black",
fill = TRUE
),
infoBox(
value = tags$p(style = "font-size: 20px;", comma(sum(dat$total_deaths, na.rm = T), digits = 0)),
title = tags$p(style = "font-size: 30px; text-transform: capitalize;", "Deaths"),
icon = icon("user-alt-slash"),
color = "black",
fill = TRUE
),
br(),
br(),
column(
width = 4,
selectInput(
inputId = "country",
label = "Select Country",
choices = levels(ts_deaths_long$country),
multiple = TRUE,
selected = c("China","Iran", "Italy")
)
),
column(
width = 4,
dateRangeInput("dateSelector",
label = "Observation Period",
start = ymd("2020-01-01"),
end = ymd("2020-04-01"),
separator = "to"
)
),
column(
width = 4,
radioButtons(
inputId = "option",
label = "Choose plot",
inline = TRUE,
choices = c("case", "death", "recovered")
)
),
br(),
highchartOutput(
outputId = "plot",
),
hr(),
highchartOutput(
outputId = "map",
)
)
)
)
)
server <- function(input, output) {
output$plot <- renderHighchart({
if (input$option == "death") {
ts_deaths_long %>%
mutate(datetime = ymd(datetime)) %>%
filter(country %in% input$country) %>%
group_by(country, datetime) %>%
summarise(deaths = sum(deaths)) %>%
filter(datetime >= input$dateSelector[1] & datetime < input$dateSelector[2]) %>%
hchart(.,
type = "line",
hcaes(
x = datetime,
y = deaths,
group = country
)
) %>%
hc_title(
text = "The number of <b>Total Deaths</b>"
) %>%
hc_subtitle(
text = "The data is compiled by the Johns Hopkins University Center"
) %>%
hc_plotOptions(
line = list(
lineWidth = 4,
allowPointSelect = TRUE,
marker= list(
enabled = FALSE,
radius=1,
symbol="circle"
)
)
) %>%
hc_add_theme(
hc_theme_db()
) %>%
hc_exporting(enabled = TRUE)
}
else if (input$option == "recovered") {
ts_recovered_long %>%
mutate(datetime = ymd(datetime)) %>%
filter(country %in% input$country) %>%
group_by(country, datetime) %>%
summarise(recovered = sum(recovered)) %>%
filter(datetime >= input$dateSelector[1] & datetime < input$dateSelector[2]) %>%
hchart(.,
type = "line",
hcaes(
x = datetime,
y = recovered,
group = country
)
) %>%
hc_title(
text = "The number of <b>Total Recovered</b>"
) %>%
hc_subtitle(
text = "The data is compiled by the Johns Hopkins University Center "
) %>%
hc_plotOptions(
line = list(
lineWidth = 4,
allowPointSelect = TRUE,
marker= list(
enabled = FALSE,
radius=1,
symbol="circle"
)
)
) %>%
hc_add_theme(
hc_theme_db()
) %>%
hc_exporting(enabled = TRUE)
}
else {
ts_confirmed_long %>%
mutate(datetime = ymd(datetime)) %>%
filter(country %in% input$country) %>%
group_by(country, datetime) %>%
summarise(confirmed = sum(confirmed)) %>%
filter(datetime >= input$dateSelector[1] & datetime < input$dateSelector[2]) %>%
hchart(.,
type = "line",
hcaes(
x = datetime,
y = confirmed,
group = country
)
) %>%
hc_title(
text = "The number of <b>Total Confirmed</b>"
) %>%
hc_subtitle(
text = "The data is compiled by the Johns Hopkins University Center "
) %>%
hc_plotOptions(
line = list(
lineWidth = 4,
allowPointSelect = TRUE,
marker= list(
enabled = FALSE,
radius=1,
symbol="circle"
)
)
) %>%
hc_add_theme(
hc_theme_db()
) %>%
hc_exporting(enabled = TRUE)
}
})
output$fulldata <- renderDataTable({
dat %>%
mutate_if(is.numeric, ~comma(.,digits = 0)) %>%
distinct(country, .keep_all = TRUE) %>%
mutate_all(~replace_na(data = ., replace = 0)) %>%
filter(country != "Total:") %>%
datatable(caption = 'Table 1: Top 20 Confirmed Cases, Deaths, Recovered by Country',
options = list(dom = "ft",
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
"}"),
scrollX = TRUE,
pageLength = 20),
rownames = T) %>%
formatStyle(names(dat),
backgroundColor = "black",
background = "black",
target = "row",
fontSize = "100%") %>%
formatCurrency(mark = ",", columns = 2:9, interval = 3, currency = "", digits = 0)
})
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("sever")
devtools::install_github("JohnCoene/sever")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(shiny)
library(sever)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(rvest)
library(tidyverse)
library(gganimate)
library(shinythemes)
library(highcharter)
library(formattable)
library(lubridate)
library(shinyWidgets)
library(shinyjs)
library(DT)
library(sever)
options(scipen = 999)
mapdata <- read_csv("mapdata.csv")
list_dat <- read_html("https://www.worldometers.info/coronavirus") %>%
html_nodes(css = "td") %>%
html_text()
tot_country <- (length(list_dat)/9)-1
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*9)-8, by = 9))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*9)-7, by = 9))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*9)-6, by = 9))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*9)-5, by = 9))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*9)-4, by = 9))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*9)-3, by = 9))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*9)-2, by = 9))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*9)-1, by = 9))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*9)-0, by = 9))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
dat_map <- dat %>%
mutate(country = case_when(
country == "USA" ~ "United States of America",
country == "UK" ~ "United Kingdom",
country == "UAE" ~ "United Arab Emirates",
country == "S. Korea" ~ "South Korea",
country == "Czechia" ~ "Czech Republic",
TRUE ~ country
)) %>%
left_join(mapdata, by = c("country" = "name"))
dat_map
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*10)-8, by = 19))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*10)-7, by = 10))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*10)-6, by = 10))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*10)-5, by = 10))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*10)-4, by = 10))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*10)-3, by = 10))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*10)-2, by = 10))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*10)-1, by = 10))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*10)-0, by = 10))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
dat
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*10)-9, by = 19))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*10)-8, by = 10))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*10)-7, by = 10))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*10)-6, by = 10))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*10)-5, by = 10))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*10)-4, by = 10))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*10)-3, by = 10))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*10)-2, by = 10))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*10)-1, by = 10))],
tot_death_per_pop = list_dat[c(seq(from = 10, to = (tot_country*10)-0, by = 10))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
dat
tot_country
length(list_dat)/10
tot_country <- (length(list_dat)/10)-1
tot_country
tot_country <- (length(list_dat)/10)-1
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*10)-9, by = 19))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*10)-8, by = 10))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*10)-7, by = 10))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*10)-6, by = 10))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*10)-5, by = 10))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*10)-4, by = 10))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*10)-3, by = 10))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*10)-2, by = 10))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*10)-1, by = 10))],
tot_death_per_pop = list_dat[c(seq(from = 10, to = (tot_country*10)-0, by = 10))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
dat
list_dat <- read_html("https://www.worldometers.info/coronavirus") %>%
html_nodes(css = "td") %>%
html_text()
tot_country <- (length(list_dat)/10)-1
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*10)-9, by = 19))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*10)-8, by = 10))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*10)-7, by = 10))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*10)-6, by = 10))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*10)-5, by = 10))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*10)-4, by = 10))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*10)-3, by = 10))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*10)-2, by = 10))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*10)-1, by = 10))],
tot_death_per_pop = list_dat[c(seq(from = 10, to = (tot_country*10)-0, by = 10))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
tot_death_per_pop = str_remove_all(tot_death_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
dat
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*10)-9, by = 10))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*10)-8, by = 10))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*10)-7, by = 10))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*10)-6, by = 10))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*10)-5, by = 10))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*10)-4, by = 10))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*10)-3, by = 10))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*10)-2, by = 10))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*10)-1, by = 10))],
tot_death_per_pop = list_dat[c(seq(from = 10, to = (tot_country*10)-0, by = 10))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
tot_death_per_pop = str_remove_all(tot_death_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
dat
runApp()
library(shiny)
library(shinydashboard)
library(rvest)
library(tidyverse)
library(gganimate)
library(shinythemes)
library(highcharter)
library(formattable)
library(lubridate)
library(shinyWidgets)
library(shinyjs)
library(DT)
library(sever)
ts_confirmed <- read.csv(url("https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_19-covid-Confirmed.csv"))
ts_confirmed <- read.csv(url("https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv"))
ts_confirmed
runApp()
ts_recovered <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/archived_data/archived_time_series/time_series_19-covid-Recovered_archived_0325.csv"))
runApp()
names(ts_recovered)
date_seq <- seq(from = ymd("2020-01-22"),
length.out = ncol(ts_confirmed) - 4,
by = "day")
colnames(ts_recovered) <- c("province_state", "country", "lat", "long", as.character(date_seq))
ts_recovered <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/archived_data/archived_time_series/time_series_19-covid-Recovered_archived_0325.csv"))
colnames(ts_recovered) <- c("province_state", "country", "lat", "long", as.character(date_seq))
dim(ts_recovered)
ts_confirmed <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
date_seq <- seq(from = ymd("2020-01-22"),
length.out = ncol(ts_confirmed) - 4,
by = "day")
colnames(ts_confirmed) <- c("province_state", "country", "lat", "long", as.character(date_seq))
ts_confirmed_long <- pivot_longer(
ts_confirmed,
cols = -c(province_state, country, lat, long),
names_to = "datetime",
values_to = "confirmed"
)
ts_deaths <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
colnames(ts_deaths) <- c("province_state", "country", "lat", "long", as.character(date_seq))
ts_deaths_long <- pivot_longer(
ts_deaths,
cols = -c(province_state, country, lat, long),
names_to = "datetime",
values_to = "deaths"
)
ts_recovered <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"))
colnames(ts_recovered) <- c("province_state", "country", "lat", "long", as.character(date_seq))
colnames(ts_recovered) <- c("province_state", "country", "lat", "long", as.character(date_seq - 1))
colnames(ts_recovered) <- c("province_state", "country", "lat", "long", as.character(date_seq - 2))
runApp()
shiny::runApp()
runApp()
list_dat <- read_html("https://www.worldometers.info/coronavirus") %>%
html_nodes(css = "td") %>%
html_text()
tot_country <- (length(list_dat)/10)-1
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*11)-10, by = 11))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*11)-9, by = 11))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*11)-8, by = 11))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*11)-7, by = 11))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*11)-6, by = 11))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*11)-5, by = 11))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*11)-4, by = 11))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*11)-3, by = 11))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*11)-2, by = 11))],
tot_death_per_pop = list_dat[c(seq(from = 10, to = (tot_country*11)-1, by = 11))],
first_case = list_dat[c(seq(from = 11, to = (tot_country*11)-0, by = 11))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
tot_death_per_pop = str_remove_all(tot_death_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
view(dat)
runApp()
list_dat <- read_html("https://www.worldometers.info/coronavirus") %>%
html_nodes(css = "td") %>%
html_text()
tot_country <- (length(list_dat)/10)-1
dat <- tibble(
country = list_dat[c(seq(from = 1, to = (tot_country*11)-10, by = 11))],
total_cases = list_dat[c(seq(from = 2, to = (tot_country*11)-9, by = 11))],
new_cases = list_dat[c(seq(from = 3, to = (tot_country*11)-8, by = 11))],
total_deaths = list_dat[c(seq(from = 4, to = (tot_country*11)-7, by = 11))],
new_deaths = list_dat[c(seq(from = 5, to = (tot_country*11)-6, by = 11))],
total_recovered = list_dat[c(seq(from = 6, to = (tot_country*11)-5, by = 11))],
active_cases = list_dat[c(seq(from = 7, to = (tot_country*11)-4, by = 11))],
serious_critical = list_dat[c(seq(from = 8, to = (tot_country*11)-3, by = 11))],
tot_cases_per_pop = list_dat[c(seq(from = 9, to = (tot_country*11)-2, by = 11))],
tot_death_per_pop = list_dat[c(seq(from = 10, to = (tot_country*11)-1, by = 11))],
first_case = list_dat[c(seq(from = 11, to = (tot_country*11)-0, by = 11))]
) %>%
mutate(
total_cases = str_remove_all(total_cases, pattern = ",") %>% as.numeric(),
new_cases = str_remove_all(new_cases, pattern = "\\+") %>% as.numeric(),
new_deaths = str_remove_all(new_deaths, pattern = "\\+") %>% as.numeric(),
total_deaths = str_remove_all(total_deaths, pattern = ",") %>% as.numeric(),
total_recovered = str_remove_all(total_recovered, pattern = ",") %>% as.numeric(),
active_cases = str_remove_all(active_cases, pattern = ",") %>% as.numeric(),
serious_critical = str_remove_all(serious_critical, pattern = ",") %>% as.numeric(),
tot_cases_per_pop = str_remove_all(tot_cases_per_pop, pattern = ",") %>% as.numeric(),
tot_death_per_pop = str_remove_all(tot_death_per_pop, pattern = ",") %>% as.numeric(),
country = str_squish(country)
)
view(dat)
runApp()
TES <- read.csv(url("https://www.kaggle.com/ardisragen/indonesia-coronavirus-cases/download/luXtIjrqogOX0QfLRbUl%2Fversions%2FgIlAMGwnD3j0tUiLcAZe%2Ffiles%2Fcases.csv?datasetVersionNumber=26"))
tes
TES
